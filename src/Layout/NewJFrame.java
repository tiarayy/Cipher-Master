/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Layout;

import Cipher.HillCipher;
import Cipher.PlayfairCipher;
import Cipher.VigenereCipher;
import File.FileUploader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainLayout
     */
    public NewJFrame() {
        initComponents();
        chooseFile();
        
        text_OutputText.setColumns(20);
        text_OutputText.setRows(5);
    }
    
    private void chooseFile() {
        button_SelectFile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int returnValue = fileChooser.showOpenDialog(null);
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fileContent = null;
                    try {
                        fileContent = FileUploader.readFile(selectedFile.getAbsolutePath());
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    text_InputText.setText(fileContent);
                }
            }
        });

        button_Encrypt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String inputText = text_InputText.getText();
                String key = text_InputKey.getText();
                String cipherType = (String) combo_SelectCipher.getSelectedItem();

                if (key.length() < 12) {
                    JOptionPane.showMessageDialog(null, "Key must be at least 12 characters.");
                    return;
                }

                String encryptedText = "";
                switch (cipherType) {
                    case "Vigenere Cipher":
                        encryptedText = VigenereCipher.encrypt(inputText, key);
                        break;
                    case "Playfair Cipher":
                        encryptedText = PlayfairCipher.encrypt(inputText, key);
                        break;
                    case "Hill Cipher":
                        encryptedText = HillCipher.encrypt(inputText, key);
                        break;
                }
                text_OutputText.setText(encryptedText);
            }
        });

        button_Descrypt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String inputText = text_OutputText.getText();
                String key = text_InputKey.getText();
                String cipherType = (String) combo_SelectCipher.getSelectedItem();

                if (key.length() < 12) {
                    JOptionPane.showMessageDialog(null, "Key must be at least 12 characters.");
                    return;
                }

                String decryptedText = "";
                switch (cipherType) {
                    case "Vigenere Cipher":
                        decryptedText = VigenereCipher.decrypt(inputText, key);
                        break;
                    case "Playfair Cipher":
                        decryptedText = PlayfairCipher.decrypt(inputText, key);
                        break;
                    case "Hill Cipher":
                        decryptedText = HillCipher.decrypt(inputText, key);
                        break;
                }
                text_OutputText.setText(decryptedText);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_CipherMaster = new javax.swing.JPanel();
        label_CipherMaster = new javax.swing.JLabel();
        label_SelectCipher = new javax.swing.JLabel();
        combo_SelectCipher = new javax.swing.JComboBox<>();
        label_UploadFile = new javax.swing.JLabel();
        button_SelectFile = new javax.swing.JButton();
        label_InputText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        text_InputText = new javax.swing.JTextArea();
        label_InputKey = new javax.swing.JLabel();
        text_InputKey = new javax.swing.JTextField();
        label_OutputText = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        text_OutputText = new javax.swing.JTextArea();
        button_Encrypt = new javax.swing.JButton();
        button_Descrypt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_CipherMaster.setText("Cipher Master");

        label_SelectCipher.setText("Select Cipher");

        combo_SelectCipher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vigenere Cipher", "Playfair Cipher", "Hill Cipher"}));
        combo_SelectCipher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_SelectCipherItemStateChanged(evt);
            }
        });
        combo_SelectCipher.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                combo_SelectCipherAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        combo_SelectCipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_SelectCipherActionPerformed(evt);
            }
        });

        label_UploadFile.setText("Upload File");

        button_SelectFile.setText("Select File");

        label_InputText.setText("Input Text");

        text_InputText.setColumns(20);
        text_InputText.setRows(5);
        jScrollPane1.setViewportView(text_InputText);

        label_InputKey.setText("Input Key");

        text_InputKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_InputKeyActionPerformed(evt);
            }
        });

        label_OutputText.setText("Output Text");

        text_OutputText.setColumns(20);
        text_OutputText.setRows(5);
        jScrollPane2.setViewportView(text_OutputText);

        button_Encrypt.setText("Encrypt");

        button_Descrypt.setText("Descrypt");

        javax.swing.GroupLayout panel_CipherMasterLayout = new javax.swing.GroupLayout(panel_CipherMaster);
        panel_CipherMaster.setLayout(panel_CipherMasterLayout);
        panel_CipherMasterLayout.setHorizontalGroup(
            panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CipherMasterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_CipherMasterLayout.createSequentialGroup()
                        .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(panel_CipherMasterLayout.createSequentialGroup()
                                .addComponent(label_InputText)
                                .addGap(87, 87, 87)
                                .addComponent(label_InputKey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(text_InputKey))
                            .addGroup(panel_CipherMasterLayout.createSequentialGroup()
                                .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_SelectCipher)
                                    .addComponent(combo_SelectCipher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(button_SelectFile)
                                    .addComponent(label_UploadFile)
                                    .addComponent(label_OutputText))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CipherMasterLayout.createSequentialGroup()
                        .addGap(0, 121, Short.MAX_VALUE)
                        .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CipherMasterLayout.createSequentialGroup()
                                .addComponent(label_CipherMaster)
                                .addGap(161, 161, 161))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CipherMasterLayout.createSequentialGroup()
                                .addComponent(button_Encrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_Descrypt)
                                .addGap(119, 119, 119))))))
        );
        panel_CipherMasterLayout.setVerticalGroup(
            panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CipherMasterLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(label_CipherMaster)
                .addGap(18, 18, 18)
                .addComponent(label_SelectCipher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_SelectCipher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(label_UploadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_SelectFile)
                .addGap(18, 18, 18)
                .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_InputText)
                    .addComponent(label_InputKey)
                    .addComponent(text_InputKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(label_OutputText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(panel_CipherMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_Encrypt)
                    .addComponent(button_Descrypt))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_CipherMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_CipherMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combo_SelectCipherAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_combo_SelectCipherAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_SelectCipherAncestorAdded

    private void combo_SelectCipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_SelectCipherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_SelectCipherActionPerformed

    private void combo_SelectCipherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_SelectCipherItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_SelectCipherItemStateChanged

    private void text_InputKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_InputKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_InputKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_Descrypt;
    private javax.swing.JButton button_Encrypt;
    private javax.swing.JButton button_SelectFile;
    private javax.swing.JComboBox<String> combo_SelectCipher;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_CipherMaster;
    private javax.swing.JLabel label_InputKey;
    private javax.swing.JLabel label_InputText;
    private javax.swing.JLabel label_OutputText;
    private javax.swing.JLabel label_SelectCipher;
    private javax.swing.JLabel label_UploadFile;
    private javax.swing.JPanel panel_CipherMaster;
    private javax.swing.JTextField text_InputKey;
    private javax.swing.JTextArea text_InputText;
    private javax.swing.JTextArea text_OutputText;
    // End of variables declaration//GEN-END:variables
}
